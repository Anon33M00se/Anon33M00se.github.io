#+TITLE: How is this site made?
#+INCLUDE: "./header.org"

* How does this site work?

A few people have asked me about how I manage this site. It changes
frequently, as I will often throw stuff up very quickly, move it
around, and take it down again.

The whole site is managed by editing local files in emacs and then a
couple of quick keystrokes push out any changes to free webhosting on
github. I'll explain each of the pieces in turn.


* It Starts with Org Mode

Org-mode is a part of Emacs, and is a whole ecosystem for, well,
organizing information. [[https://orgmode.org/][Org]] files are just plain text with some
formatting conventions not unlike [[https://en.wikipedia.org/wiki/Markdown][Markdown]]. Here's an example: 

#+BEGIN_SRC code


,* How does this site work?

A few people have asked me about how I manage this site. It changes
frequently, as I will often throw stuff up very quickly, move it
around, and take it down again.

The whole site is managed by editing local files in emacs and then a
couple of quick keystrokes push out any changes to a free webhosting
github. I'll explain each of the pieces in turn.

,* It Starts with Org Mode

Org-mode is a part of Emacs, and is a whole ecosystem for, well,
organizing information. [[https://orgmode.org/][Org]] files are
just plain text with some formatting conventions not unlike
[[https://en.wikipedia.org/wiki/Markdown][Markdown]]. Here's an example: 


#+END_SRC

That is the exact content that this page starts with. Because I spend
most of my day in Emacs already (see [[https://stuff.sigvaldason.com/email.html][email]]), it is super easy to just
pop into an org file, make some changes (or open a new file) and
automatically push the changes out to "production".

You can do a lot of different kinds of formats in Org-mode very easily. For example:

#+BEGIN_SRC code

,*bold*, _underline_, +strikethrough+, /italics/

| n | n^2 | n^3 |
|---+-----+-----|
| 1 |   1 |   1 |
| 2 |   4 |   8 |
| 3 |   9 |  27 |

$y=x^2$
#+END_SRC

produces:

*bold*, _underline_, +strikethrough+, /italics/

| n | n^2 | n^3 |
|---+-----+-----|
| 1 |   1 |   1 |
| 2 |   4 |   8 |
| 3 |   9 |  27 |

$y=x^2$

This is just scratching the surface or Org-mode. To quote from the [[https://orgmode.org/worg/org-faq.html][Org FAQ]]:

#+BEGIN_QUOTE
In its default setup, Org-mode offers a simple outlining and task
management environment. But it also has a huge number of features and
settings "under the hood." Advanced users have configured Org-mode for
almost every conceivable use scenario.
#+END_QUOTE


* Add in Some Packages

Emacs has a notion of packages, and there a few available for
automating the translation of org files into html. In fact, Org-mode
has built-in exporting to a number of different formats, including
$\LaTeX$, PDF, ODT/Word, and html. While the default html output from
Org is serviceable, there is a more powerful package available that is
more flexible, produces nicer html output, and helps keep various
ancilliary files organized.

The main package for this is ox-publish, which is really part of
Org-mode itself. You can create an elisp file (a bit of interpretable
code written in Emac's own variant of the Lisp programming language)
that:

1. Makes sure ox-publish is in place

2. Describes where the source (.org) files for the site are located (relative to the directory the elisp file is in).

3. Describes the "publishing" directory where html output files should end up.

4. Sets various other optional parameters (e.g. css style sheets to use, 

5. Runs the actual page creation process.

Then, any time you make any edits or structural changes to the
underlying org document, you just invoke this script to automagically
process all the changes.

There are other things you can do within ox-publish. The one I use for
this site is in the code block below, and I include resources at the
end of this document where you can find more details on running
ox-publish scripts.

#+BEGIN_SRC elisp

;;
;; Bring in the package system (elpa/melpa), make sure that is not
;; messing with our normal (user) package dir but is doing so in the
;; local .packages directory, and then bring in htmlize (mostly for
;; syntax highlighting in code blocks).
;;

(require 'package)
(setq package-user-dir (expand-file-name "./.packages"))
(setq package-archives '(("melpa" . "https://melpa.org/packages/"   )
			 ("elpa"  . "https://elpa.gnu.org/packages" )))

;; Init the package system
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Install dependencies
(package-install 'htmlize)

;;
;; Load the publishing system
;;
(require 'ox-publish)

(setq org-html-validation-link             nil ;; don't show a "Validate" link at the bottom of the page
      org-html-head-include-scripts        nil ;; don't put default org-html export scripts in place
      org-html-doctype                     "html5"
      org-html-html5-fancy                 t
      org-html-head-include-default-style  nil ;; skip the default style sheet
      org-html-viewport                    '((width "device-width")
			                     (initial-scale "0.5")
			                     (minimum-scale "")
			                     (maximum-scale "")
			                     (user-scalable ""))
					     
      org-html-head                        "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\"/>
                                            <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/customizations.css\" />
                                            <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/org-html-styling.css\" />"
                                            ;; ^ This last file is generated by running org-html-htmlize-generate-css
      ;;org-html-head                       "<link rel=\"stylesheet\" href=\"https://latex.vercel.app/style.css\" />"
      ;;org-html-head                       "<link rel=\"stylesheet\" href=\"/css/latex.css\" />"
      ;;org-html-htmlize-output-type        'inline-css
      org-html-htmlize-output-type          'css
      
  )

(setq org-publish-project-alist
  (list
   (list "stuff"
     :recursive t
     :base-directory "./content"
     :base-extension "org"
     :publishing-directory "./public"
     :publishing-function 'org-html-publish-to-html
     :with-author nil
     :with-title nil
     :with-creator t
     :with-toc nil
     :section-numbers nil
     :time-stamp-file t)
   (list "static"
     :recursive t
     :base-directory "./static"
     :base-extension "css\\|js\\|pdf\\|png"
     :publishing-directory "./public/static"
     :publishing-function 'org-publish-attachment
     :with-author nil
     :with-title nil
     :with-creator t
     :with-toc nil
     :section-numbers nil
     :time-stamp-file t)))

(org-publish-all t)
     

(message "Build complete!")



#+END_SRC




The htmlize package is included in there so that if I have a code block in a given file, like this:

#+BEGIN_SRC python

from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async def root():
    return {"message": "Hello, World!"}

#+END_SRC

I get syntax highlighting automatically without having to do anything further. 
 

* Hosting at Github (& "Actions")

Everything up to this point has been about creating content in org
format and then automatically converting it to nice looking html.

* Custom Domain Name

The last little detail on this is how to have a custom domain name
point at the github hosted content. 

* Worth It?

If you've never used Emacs and/or org-mode, it might seem like a *lot*
of upfront work to get over the mountain of Emacs just so you can
easily manage the molehill of pushing out website updates.

I actually came to Emacs after roughly 20 years of using joe ([[https://joe-editor.sourceforge.io/][Joe's
Own Editor]]), and some of my muscle memory for text editing was so deep
that I had to customize emacs to mimic many of joe's keystrokes.

But whatever path you take to get to Emacs, it will almost certainly
be worth it. If you are an engineer, developer, or other technical
user. Emacs (plus Org-mode, dired, mu4e, git/magit, etc., etc.) is
just such a powerful tool that is worth learning to use well. If the
path happens to start with wanting to manage a website in Org-mode,
there are worse ways to begin the journey.


* Resources

The amazing [[https://systemcrafters.net/][System Crafters]] website has a whole series of videos
related to Emacs, and a section devoted to website publishing with
Emacs:

- [[https://systemcrafters.net/publishing-websites-with-org-mode/building-the-site][Build Your Website with Org Mode]]
- [[https://systemcrafters.net/publishing-websites-with-org-mode/automated-site-publishing/][Automated Org Mode Website Publishing with GitHub or SourceHut]]

The above link covers using ox-publish quite extensively. There's
another guide to using ox-publish on the Org-mode website here:

- [[https://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html][Publishing Org-mode files to HTML]]

  
